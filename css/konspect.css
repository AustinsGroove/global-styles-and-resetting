/**
  |============================
  | СЕЛЕКТОРИ
  |============================
*/
/* шпаргалка по комбинациям селекторов:
https://webref.ru/course/css-tutorial/selector-combine
*/
/* 
Группирование селекторов (А, B)
Селекторы потомка (A B)
Дочерние селекторы (A > B)
Смежные селекторы (A + B) (выбираются элементы, у которых есть общий родитель и они находятся рядом друг с другом
Братские селекторы (A ~ B)
Объединение селекторов: (.class-a.class-b) - Стили будут применены только к тому элементу, который содержит 
все перечисленные селекторы.
(Этот приём применим только для классов и атрибутов, потому что только их может быть больше одного. )
*/

/*  Не плутати з композицією класів в HTML:
<p class="value1 value2 value3">Random text content :)</p>
*/

/**
  |============================
  | ПСЕВДОКЛАСИ
  |============================
*/
/* -------- СТАНУ
:hover
:focus
:active

----------- СТРУКТУРНІ
:first-child 
:last-child
:not(selector)   например    .list-item:not(:last-child)  --  применить ко всем  item    кроме  :last-child
:nth-child(an + b) де a - період циклу. n - лічильник циклу. Починається з нуля та збільшується на одиницю на 
                кожній ітерації. b - зміщення. Довільне число. На практике используем для выбора парных или 
                непарных элементов. Пример:
      :nth-child(2n) - выбрать все парные элементы       2n - синоним even      :nth-child(even) - то же самое
      :nth-child(2n + 1) - выбрать все парные элементы  2n + 1 -  синоним odd   :nth-child(odd)  - то же самое
*/

/**
  |============================
  | Глобальні СТИЛІ, Скидання стилів, змінні
  |============================
*/
/* root */
:root {
  --primary-brand-color: #4d5ae5;
}
/* body */
body {
  background-color: var(--white-background-color);
  font-family: Roboto, sans-serif;
  color: var(--text-color);
  font-size: 16px;
  line-height: 1.5;
  letter-spacing: 0.02em;
}
/* заголовки */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: 'Tahoma';
}
/* списки */
ul,
ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
}
/* контакти і адреса */
.address {
  font-style: normal;
}
/* посилання */
.link {
  text-decoration: none;
}

/**
  |============================
  | БЛОКОВА МОДЕЛЬ
  |============================
*/
/* Глобальний border-box */
*,
*::before,
*::after {
  box-sizing: border-box;
}
/* У нормалізаторі modern-normalize за умовчанням задано глобальний border-box. Отже, якщо його підключено 
до проєкту, то у своїх стилях box-sizing можна не вказувати. */

/* Глобальне скидання стилів margin, padding */
h1,
h2,
h3,
h4,
h5,
h6,
p {
  margin-top: 0;
  margin-bottom: 0;
}
ul,
ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

/* Маржин елемента body */
/* За умовчанням у таблиці стилів браузера для margin елемента body задано значення 8px з усіх боків. 
У дизайні сучасних веб-сторінок цей маржин не використовується, тому його завжди обнуляють у правилі 
із селектором body. */
body {
  margin: 0;
}
/* Обнулення маржина body вже є певним «стандартом» сучасної розробки, то ж нормалізатор 
modern-normalize містить цей крок. */

/* Горизонтальне центрування блокових елементів */
.box {
  margin: 0 auto;
}

/* Контейнери <div> */
/* Контейнеру обов'язково задаються:
ширина по макету;
автоматичні горизонтальні маржини і
необов'язкові горизонтальні падінги, також згідно макету. */
.container {
  width: 480px;
  margin: 0 auto;
  padding: 0 15px;
}

/* Рядкові елементи (inline):
- ігнорують значення width і height, верхніх і нижніх 'margin', 'padding' і border.
- Верхні та нижні падінги, а також рамки рядкового елемента працюють дуже дивно — не збільшують розмір блоку, 
 але візуально відображаються. */

/* - У рядкових та рядково-блочних елементів є правий проміжок !!!!!!!!!! Це не margin або padding, 
а буквально порожнє місце - 1/4 розміру шрифту найближчого батьківського елемента. */

/**
  |============================
  | ЗОБРАЖЕННЯ
  |============================
*/
/* Зображення - особливий елемент тому, що в нього крім правого зазору є ще нижній зазор - 1/4 розміру шрифту 
найближчого батьківського елемента !!!!!!!!!!!!!!!!!!!! . */

/* Прибираємо нижній проміжок для всього проєкта */
/* Автоматично підлаштовування зображення під ширину батьківського елемента */
img {
  display: block;
  max-width: 100%;
}

/* Розташування зображення в контейнері фіксованого розміру.
Для того, щоб ця техніка працювала, необхідні два обов'язкові кроки. 
- контейнеру має бути явно задано фіксовану висоту. 
- зображення необхідно «вмістити» в контейнер, задавши img висоту та ширину 100%, і вказати object-fit. */
.thumb {
  height: 400px;
  width: 300px;
}
.thumb img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
/* Варианты object-fit:

fill       -	Значение по умолчанию. Содержимое замещаемого элемента полностью заполняет область контейнера тега,
используя его высоту и ширину.
contain	   - Содержимое элемента масштабируется, выравниваясь по центру с сохранением пропорций таким образом, 
чтобы полностью поместиться внутри контейнера.
cover	     - Содержимое элемента обрезается, выравниваясь по центру с сохранением пропорций таким образом, 
чтобы полностью заполнить область контейнера.
scale-down -	Содержимое элемента выбирает из двух значений none и contain то значение, которое даёт меньшие размеры.
none	     - Замещаемое содержимое не изменяет свои собственные размеры, чтобы поместиться и заполнить область контейнера.
initial	   - Устанавливает это свойство в значение по умолчанию.
inherit	   - Наследует значение свойства от родительского элемента.*/

/* скрытие части изображения за пределами  .thumb*/
.thumb {
  overflow: hidden;
}

/* Скрол  изображения */
/* overflow: | hidden | scroll | auto */
.thumb {
  overflow: auto;
}

/**
  |============================
  | FLEX BOX
  |============================
*/
/* шпаргалка 
https://tpverstak.ru/flex-cheatsheet/
*/
/* -------------------------------    Container       ------------------------------------ */
/* 
За замовчуванням display: flex створює однорядковий контейнер, елементи розміщуються на одному рядку 
й за потреби стискаються!!!!!!. Властивість flex-wrap дозволяє перетворити однорядковий контейнер на багаторядковий. 
----------------
Властивість gap комбінує в собі значення властивостей row-gap і column-gap, які дозволяють окремо вказати 
розміри зазорів між рядками і стовпцями сітки. Використовуйте gap коли зазори однакові. В іншому випадку 
підійдуть row-gap і column-gap.
*/
.menu {
  display: flex;
  gap: 8px;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  flex-wrap: wrap;
}
/* або
display: inline-flex */
/* 
ДЛЯ КОНТЕЙНЕРА
flex-direction: row | row-reverse | column | column-reverse 
justify-content: flex-start | flex-end | center | space-between | space-around (1/2-1-1/2) | space-evenly (1-1-1)
align-items: stretch | flex-start | flex-end | center | baseline (вирівнювання одного рядку відносно крос лінії)
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch (вирівнювання 
              всього контенту відносно крос лінії)
flex-wrap: nowrap | wrap | wrap-reverse ( дозволяє перетворити однорядковий контейнер на багаторядковий)

ДЛЯ ЕЛЕМЕНТІВ
align-self: auto | flex-start | flex-end | center | baseline | stretch (озволяє елементу змінити своє розташування 
на cross axis, перевизначивши собі значення властивості align-items від контейнера.)
*/

/*  -------------------------        flex-елементи:             -------------------

Flex-елементи — це діти flex-контейнера, елементи першого рівня вкладеності.
- не підкорюються стандартному потоку документа;
- втрачають свій тип (блоковий, рядковий, тощо) ;
- дотримуються правил позиціонованої Flexbox-моделі.*/

/* Властивість flex-basis визначає початковий розмір. 
Початковий розмір — це розмір до застосування властивостей flex-grow і flex-shrink 
Якщо вказані обидві властивості, flex-basis і width, то властивість width ігнорується.
Властивість flex-basis може визначати висоту, а не ширину елемента (Якщо головна вісь йде вертикально).
Властивості min-width і max-width працюють як обмежувачі розміру елемента навіть якщо у нього вказано flex-basis.
*/
/* Для создания СЕТКИ элементам флексбокса добавляем: */
.menu .li {
  flex-basis: calc((100% - 20px) / 3);
  flex-grow: 1;
}
/* 
ПРОБЕЛЫ ОБЯЗАТЕЛЬНЫ!!!!
20px - общая длина зазоров между элементами
3 - количество планируемых столбцов
 */
/* 
Властивість flex-grow задає частку вілього пространства для елемента. Тобто вона керує пропорціями елементів щодо один одного.
Властивість flex-shrink визначає здатність flex-елемента займати менше місця, ніж його початковий розмір
Забороняэмо стискання:*/
.menu .li {
  flex-shrink: 0;
}

/* Як реалізувати приклеєний футер сторінки?
<div class="page-container">
	<header>Page header</header>
	<main>Main content</main>
	<footer>Page footer</footer>
</div>
*/
.page-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}
main {
  flex-grow: 1;
}
/* min-height: 100vh  -  мінімальна висота - 100% висоти вкладки браузера на екрані (viewport height — відсотки). */
/**
  |============================
  | ДЕКОРАТИВНІ ЕЛЕМЕНТИ, АНІМАЦІЯ
  |============================
*/

/* ---------------- Зображення фону---------------- */
/*Елемент фону background-image: поширюється лише на область вмісту і падінг і ніколи на маржин.*/
/* Варто відразу задати колір фону та фонове зображення, яке завжди буде розташоване поверх фону.*/
.hero {
  background-color: #2a2a2a;
  background-image: url(шлях до зображення);
  background-repeat: no-repeat;
  /* background-repeat: repeat за замовчуванням */
  /* background-repeat: repeat | repeat-x | repeat-y | no-repeat; */
  background-position: center center;
  /* Задається окремо по осі Х та У. ЗАВЖДИ СПОЧАТКУ ПО Х а потім - по У. 
  Можна у px чи % або top, bottom, right, left, center.
  За замовчуванням задане значення left для x і top для y*/
  backrgound-position: right 30px bottom 20px;
  /*                        ^^^^^     ^^^^^                         
/зміщення вліво від правого краю   зміщення вверх від нижнього краю*/
  background-size: cover;
  /* background-size: auto | значення | cover | contain
  Значення задається окремо width та height.
  Якщо не вказати висоту, вона буде розрахована автоматично зі збереженням пропорцій.
  Значенням також можуть бути два зарезервовані слова: cover і contain. 
  Функція обох значень — максимально вмістити у контейнер фонове зображення, але різними способами.
  cover — за рахунок обрізання зайвого.
  contain — за рахунок утворення порожнього простору в контейнері. */
}

/* ---------------- Багатошаровий фон ---------------- */
/* Елементу можна задати кілька фонових зображень одночасно. Достатньо перерахувати їх у властивості 
background-image через кому. Для кожного зображення також можна задати значення інших властивостей фону, 
також через кому в кожній властивості. */
/* !!!!!!! Зображення, яке йде у переліку попереду, буде розташовано вище (зображення 1 у коді вище) !1!!!!! */
background-image: url(шлях до зображення 1), url(шлях до зображення 2);
background-size: 100px, cover;
background-position: top right, center;
background-repeat: repeat-x, no-repeat;

/* ---------------- Лінійний градієнт ----------------  */
/* Градієнт — перехід від одного кольору до іншого.
background-image: linear-gradient(
	<напрямок>, 
	<колір-1>, 
	<колір-2>, 
	<колір-3>, 
	...)
Напрямок градієнта задається to top, to right, to bottom, to left і їх комбінаціями. За замовчуванням — to bottom. 
Напрямок також можна задати кутом нахилу в градусах — одиниця deg. 
Приклад:
  background-image: linear-gradient(90deg, red, blue);
  */

/* ---------------- Властивість background ---------------- */
/* Властивість background — це складена властивість одночасного завдання значень всіх розглянутих властивостей.
background: background-color background-image background-repeat background-position background-attachment
Якщо компонент не вказано, використовується його значення за замовчуванням.
ПРИКЛАД:
background: url(шлях до зображення) repeat-x;
(Прозорий колір фону з картинкою, що повторюється по x, починаючи з верхнього лівого кута.)
*/

/* ---------------- Тіні ----------------  */
/* Властивість box-shadow задає елементу одну або більше тіней. За замовчуванням розмір тіні збігається 
з розміром елемента, а її колір такий самий, як і колір його тексту. */
box-shadow: <x-offset> <y-offset> <blur> <spread> <color>;
/* blur — радіус розмиття. Чим більше значення, тим сильніше розмита тінь. Необов'язкове значення.
spread — радіус поширення. Позитивне значення збільшує тінь, негативне — зменшує. Необов'язкове значення.
color — колір тіні. Можна використовувати будь-який формат запису кольору. Необов'язкове значення. */

/* На один елемент можна додати кілька тіней, вказавши їх значення через кому. Кожна попередня тінь зі списку 
розташовується на вищому шарі і визуально перекриває всі наступні. */

/* Синтаксис оголошення внутрішньої тіні аналогічний синтаксису звичайної тіні, але першим значенням 
необхідно вказати inset. */

/* ---------------- Вбудований SVG ---------------- */
/* Вбудовуємо в HTML: 
<svg
  width="20"
  height="20"
  viewBox="0 0 9 16"  --- min-x, min-y, width и height --- задают границы окна отображения элемента SVG
  fill="currentColor"
  xmlns="http://www.w3.org/2000/svg"
>
  <path
    d="M6.66463 2.65667H8.1253V0.112667C7.8733 0.078 7.00663 0 5.9973 0C3.8913 0 2.44863 1.32467 2.44863 3.75933V6H0.124634V8.844H2.44863V16H5.29797V8.84467H7.52797L7.88197 6.00067H5.2973V4.04133C5.29797 3.21933 5.5193 2.65667 6.66463 2.65667Z"
  /> 
  */
/* CSS властивість fill 
   Властивість fill керує кольором заливки. Якщо колір заливки не вказано, фігура буде залита поточним 
   кольором тексту (за замовчуванням — чорним).  */
.icon {
  fill: #2a2a2a;
}
/* Змінюємо колір заливки при ховері. */
.icon:hover {
  fill: #03a9f4;
}

/* ---------------- SVG-спрайти ---------------- */
/* Алгоритм створення SVG-спрайт
- Відкрий макет у Figma, обери там всі іконки й експортуй їх в SVG-форматі на свій комп’ютер.
- Зайди на icomoon.io , натисни кнопку Import Icons зверху ліворуч та додай всі іконки.
- Натисни Generate SVG & More внизу ліворуч.
- Натиснути Download внизу ліворуч. 

В одному файлі можна описати безліч різних груп фігур, використовуючи елемент <symbol>, після чого, 
задавши кожному символу унікальний id, звернутися до будь-якого з них з HTML-документа.

Використання у HTML:
<svg>
  <use href="./шлях-до-svg-спрайту/имэя-спрайта.svg#ідентифікатор-символа"></use>
</svg>*/

/* ---------------- Псевдоелементи ---------------- */
/* ::before - створює псевдоелемент перед всім вмістом елемента (на початку) ВСЕРЕДИНІ елементу. */
/* ::after - створює псевдоелемент після всього вмісту елемента (наприкінці) ВСЕРЕДИНІ елементу. */
.box {
  /* стилі елемента */
}
.box::before {
  /* стилі псевдоелемента before */
  content: '';
}
/* За замовчуванням псевдоелементи — це рядкові елементи. Для того, щоб задати псевдоелементу вертикальну 
геометрію, необхідно змінити його тип на блоковий або рядково-блоковий. 
Властивість content є обов’язковою, без неї браузер не створить псевдоелемент. Якщо за макетом текстовий контент
не потрібний, його значенням необхідно поставити порожній рядок та задати width та height: 
*/
.box::before {
  content: '';
  width: 100px;
  height: 2px;
}
/* Використання псевдокласів стану разом з псевдоелементами:
Застосувати стилі до псевдоелементу .box::before при ховері на елемент .box */
.box:hover::before {
  background-color: green;
}
