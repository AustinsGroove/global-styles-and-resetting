/*------------------------------------        СЕЛЕКТОРИ      --------------------------*/
/* шпаргалка по комбинациям селекторов:
https://webref.ru/course/css-tutorial/selector-combine
*/
/* 
Группирование селекторов (А, B)
Селекторы потомка (A B)
Дочерние селекторы (A > B)
Смежные селекторы (A + B)
Братские селекторы (A ~ B)
Объединение селекторов: (.class-a.class-b) - Стили будут применены только к тому элементу, который содержит 
все перечисленные селекторы.
(Этот приём применим только для классов и атрибутов, потому что только их может быть больше одного. )
*/

/*  Не плутати з композицією класів в HTML:
<p class="value1 value2 value3">Random text content :)</p>


*/

/* ----------------------------     ПСЕВДОКЛАСИ:     -------------------------
-------- СТАНУ
:hover
:focus
:active

-------- СТРУКТУРНІ
:first-child 
:last-child
:not(selector)   например    .list-item:not(:last-child)  --  применить ко всем  item    кроме  :last-child
:nth-child(an + b) де a - період циклу. n - лічильник циклу. Починається з нуля та збільшується на одиницю на 
                кожній ітерації. b - зміщення. Довільне число. На практике используем для выбора парных или 
                непарных элементов. Пример:
      :nth-child(2n) - выбрать все парные элементы       2n - синоним even      :nth-child(even) - то же самое
      :nth-child(2n + 1) - выбрать все парные элементы  2n + 1 -  синоним odd   :nth-child(odd)  - то же самое


*/

/*----------------------------     Глобальні    СТИЛІ, Скидання стилів , змінні     --------------------------*/

/* root */
:root {
  --primary-brand-color: #4d5ae5;
}

/* body */
body {
  background-color: var(--white-background-color);
  font-family: Roboto, sans-serif;
  color: var(--text-color);
  font-size: 16px;
  line-height: 1.5;
  letter-spacing: 0.02em;
}

/* заголовки */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: 'Tahoma';
}

/* списки */
ul,
ol {
    margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
}


/* контакти і адреса */
.address {
  font-style: normal;
}

/* посилання */
.link {
  text-decoration: none;
}

/* ----------------------------      БЛОКОВА МОДЕЛЬ  ---------------------------*/

/* Глобальний border-box */
*,
*::before,
*::after {
  box-sizing: border-box;
}
/* У нормалізаторі modern-normalize за умовчанням задано глобальний border-box. Отже, якщо його підключено 
до проєкту, то у своїх стилях box-sizing можна не вказувати. */

/* Глобальне скидання стилів margin, padding */
h1,
h2,
h3,
h4,
h5,
h6,
p {
  margin-top: 0;
  margin-bottom: 0;
}

ul,
ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
}

/* Маржин елемента body */
/* За умовчанням у таблиці стилів браузера для margin елемента body задано значення 8px з усіх боків. 
У дизайні сучасних веб-сторінок цей маржин не використовується, тому його завжди обнуляють у правилі 
із селектором body. */
body {
  margin: 0;
}
/* Обнулення маржина body вже є певним «стандартом» сучасної розробки, то ж нормалізатор 
modern-normalize містить цей крок. */

/* скрытие части изображения за пределами  .thumb*/
.thumb {
  overflow: hidden;
}

/* Скрол  изображения */
/* overflow: | hidden | scroll | auto */
.thumb {
  overflow: auto;
}

/* Горизонтальне центрування блокових елементів */
.box {
  margin: 0 auto;
}

/* Контейнери <div> */
/* Контейнеру обов'язково задаються:
ширина по макету;
автоматичні горизонтальні маржини і
необов'язкові горизонтальні падінги, також згідно макету. */
.container {
  width: 480px;
  margin: 0 auto;
  padding: 0 15px;
}

/* Рядкові елементи (inline):
- ігнорують значення width і height, верхніх і нижніх 'margin', 'padding' і border.
- Верхні та нижні падінги, а також рамки рядкового елемента працюють дуже дивно — не збільшують розмір блоку, 
 але візуально відображаються. */

/* - У рядкових та рядково-блочних елементів є правий проміжок. Це не margin або padding, 
а буквально порожнє місце - 1/4 розміру шрифту найближчого батьківського елемента. */
/* 


*/
/* ------------------------------ ЗОБРАЖЕННЯ ----------------------------- */
/* Зображення - особливий елемент тому, що в нього крім правого зазору є ще нижній зазор - 1/4 розміру шрифту 
найближчого батьківського елемента. */

/* Прибираємо нижній проміжок для всього проєкта */
/* Автоматично підлаштовування зображення під ширину батьківського елемента */
img {
  display: block;
  max-width: 100%;
}

/* Розташування зображення в контейнері фіксованого розміру 
Для того, щоб ця техніка працювала, необхідні два обов'язкові кроки. 
- Перший: контейнеру має бути явно задано фіксовану висоту. 
- Другий: зображення необхідно «вмістити» в контейнер, задавши img висоту та ширину 100%, і вказати object-fit. */
.thumb {
  height: 400px;
  width: 300px;
}
.thumb img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

/* ------------------------------------  FLEX BOX -----------------------------------*/
/* шпаргалка 
https://tpverstak.ru/flex-cheatsheet/
*/

/* -------------------------------    Container       ------------------------------------ */
/* 
За замовчуванням display: flex створює однорядковий контейнер, елементи розміщуються на одному рядку 
й за потреби стискаються. Властивість flex-wrap дозволяє перетворити однорядковий контейнер на багаторядковий. 
----------------
Властивість gap комбінує в собі значення властивостей row-gap і column-gap, які дозволяють окремо вказати 
розміри зазорів між рядками і стовпцями сітки. Використовуйте gap коли зазори однакові. В іншому випадку 
підійдуть row-gap і column-gap.
*/
.menu {
  display: flex;
  gap: 8px;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  flex-wrap: wrap;
}
/* або
display: inline-flex */
/* 
ДЛЯ КОНТЕЙНЕРА
flex-direction: row | row-reverse | column | column-reverse 
justify-content: flex-start | flex-end | center | space-between | space-around (1/2-1-1/2) | space-evenly (1-1-1)
align-items: stretch | flex-start | flex-end | center | baseline (вирівнювання одного рядку відносно крос лінії)
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch (вирівнювання 
              всього контенту відносно крос лінії)
flex-wrap: nowrap | wrap | wrap-reverse ( дозволяє перетворити однорядковий контейнер на багаторядковий)

ДЛЯ ЕЛЕМЕНТІВ
align-self: auto | flex-start | flex-end | center | baseline | stretch (озволяє елементу змінити своє розташування 
на cross axis, перевизначивши собі значення властивості align-items від контейнера.)
*/

/*  -------------------------        flex-елементи:             -------------------


Flex-елементи — це діти flex-контейнера, елементи першого рівня вкладеності.
- не підкорюються стандартному потоку документа;
- втрачають свій тип (блоковий, рядковий, тощо) ;
- дотримуються правил позиціонованої Flexbox-моделі.*/

/* Властивість flex-basis визначає початковий розмір. 
Початковий розмір — це розмір до застосування властивостей flex-grow і flex-shrink 
Якщо вказані обидві властивості, flex-basis і width, то властивість width ігнорується.
Властивість flex-basis може визначати висоту, а не ширину елемента (Якщо головна вісь йде вертикально).
Властивості min-width і max-width працюють як обмежувачі розміру елемента навіть якщо у нього вказано flex-basis.
*/
/* Для создания СЕТКИ элементам флексбокса добавляем: */
.menu .li {
  flex-basis: calc((100% - 20px) / 3);
  flex-grow: 1;
}
/* 
ПРОБЕЛЫ ОБЯЗАТЕЛЬНЫ!!!!
20px - общая длина зазоров между элементами
3 - количество планируемых столбцов
 */
/* 
Властивість flex-grow задає частку вілього пространства для елемента. Тобто вона керує пропорціями елементів щодо один одного.
Властивість flex-shrink визначає здатність flex-елемента займати менше місця, ніж його початковий розмір
Забороняэмо стискання:*/
.menu .li {
  flex-shrink: 0;
}

/* Як реалізувати приклеєний футер сторінки?
<div class="page-container">
	<header>Page header</header>
	<main>Main content</main>
	<footer>Page footer</footer>
</div>
*/
.page-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}
main {
  flex-grow: 1;
}
/* min-height: 100vh  -  мінімальна висота - 100% висоти вкладки браузера на екрані (viewport height — відсотки). */
