/* Основні переваги використання TypeScript будуть корисні незалежно від напрямку, в якому ти плануєш розвиватись.
Ти зможеш писати безпечний код, зменшувати кількість помилок, які виникають на продакшені, та забезпечувати швидший процес розробки.

Курс познайомить тебе з основними концепціями та можливостями TypeScript:

- Базові типи, типи для змінних, аргументів, методів та функцій, створення власних типів та роботу з опціональними параметрами 
та властивостями.
- Об'єктно-орієнтоване програмування в TypeScript, роботі з класами та інтерфейсами, а також про використання UML 
та шаблонів проєктування для структурування та організації коду.
- Використання TypeScript у контексті розробки на React, типізація компонентів та хуків, а також обробка подій з типізацією.

TypeScript відкриває нові можливості та значно спрощує життя під час програмування. 
Він надає статичну типізацію та багато корисних функцій, що полегшують розробку та зменшують кількість помилок.

В цьому модулі ти дізнаєшся:
Що таке TypeScript і його переваги;
Як встановити та налаштувати середовище розробки;
Які необхідні кроки для налаштування компілятора;
Що таке Debugging, як правильно його виконувати.
 */

/**
   |============================
   | Що таке TypeScript і навіщо він потрібен
   |============================
 */
/* 
TypeScript — це мова програмування, створена Microsoft, яка розширює JavaScript і додає типи та деякі інші функції. 

Це суперсет JavaScript, який означає, що будь-який дійсний код JavaScript також є дійсним кодом TypeScript.

Мови програмування бувають двох типів: компільовані, такі як C, C++, Go і Rust, та інтерпретовані, такі як Python, Ruby, JavaScript 
та PHP. TypeScript, хоч і не у звичному сенсі, можна віднести до компільованих мов, оскільки він у результаті компілюється 
в JavaScript, і для цього нам потрібен компілятор. 

Процес перетворення TS на JS називається транспіляція. Це дозволяє відловлювати помилки не на етапі виконання коду, 
а на етапі компіляції, що є однією з великих переваг TypeScript. Однак, важливо зазначити, що оскільки TypeScript 
в результаті перетворюється на JS, потрібно враховувати наступне: якщо ви вказали тип number для якогось поля, 
а після компіляції передасте рядок, жодної помилки не буде.

Якщо згадати початок 2012 року, коли TypeScript тільки з'явився, обговорювали, чи він вартий докладання зусиль, 
і наскільки виправдано його використання. На той час еталоном розробки був JQuery, який закривав усі проблеми розробки на frontend. 
Node.js був не дуже популярний, про нього майже не згадували, і backend-технологія відбувалася на чистому JS.

Згодом frontend-код став складнішим, як і код на backend. Такі фреймворки, як React, Angular, Vue, набули масового поширення, 
і JQuery відійшов на другий план. Ось тут люди й згадали про TypeScript, тому що чистий JS не покриває всі парадигми 
об'єктно-орієнтованого програмування (ООП), не має суворої типізації, важко контролювати структуру даних.

TypeScript по суті є синтаксичним цукром для розробки. Його перевага полягає в тому, що він забезпечує статичну типізацію, 
яка допомагає виявити та виправити помилки раніше, покращує читабельність і підтримку коду. TypeScript також забезпечує повноцінну 
підтримку ООП і включає класи, інтерфейси та наслідування.

TypeScript значно уповільнює час розробки, швидше писати на чистому JS, але це ставка на перевагу в майбутньому. 
Приходить новий розробник і він вже розуміє, що саме треба передати в метод і якого типу, навіть без дослідження документації. 
До того ж сам процес розробки стає зрозумілішим, оскільки більшість помилок буде видно в процесі розробки, а не після запуску коду.

Загалом TypeScript став стандартом для великих застосунків, особливо в сучасних фреймворках, таких як React, Angular і Vue.js. 
Знання TypeScript значно збільшує ваші шанси знайти роботу або поліпшити свої навички як розробника.
*/

/**
  |============================
  | Основні переваги використання TypeScript
  |============================
*/
/* 
Давайте ще глибше розберемося в темі, чим саме гарний TypeScript, оскільки це важливий крок під час вибору мови розробки, 
й нам потрібно враховувати її основні переваги.

- Статична типізація. Статична типізація є основною перевагою TypeScript, що значно спрощує процес розробки. 
Це дозволяє уникнути багатьох помилок вже на стадії написання коду, оскільки типи змінних відомі заздалегідь.
- Підтримка ООП. TypeScript має повну підтримку об'єктно-орієнтованого програмування та включає класи, інтерфейси й успадкування. 
Це робить TypeScript чудовим інструментом для розробки великих і складних застосунків.
- Підтримка сучасних функцій JavaScript. TypeScript постійно оновлюється для підтримки нових і майбутніх функцій ECMAScript. 
Це дозволяє розробникам використовувати найсучасніші функції JavaScript і бути впевненими в їхній стабільній роботі.
- Інструменти розробки. TypeScript значно покращує взаємодію з інструментами розробки. Він пропонує покращене автозаповнення коду, 
підказки по типах, перехід до визначень та багато інших функцій, які спрощують процес написання коду.
- Сумісність із JavaScript. TypeScript — це суперсет JavaScript, що означає, що будь-який код JavaScript, що вже існує, 
можна перевести на TypeScript без модифікації. Це значно полегшує процес міграції на TypeScript і дозволяє використовувати 
вже наявний код.
- Зрозумілість і підтримка коду. Статична типізація робить код, написаний на TypeScript, більш зрозумілим і підтримуваним. 
Це полегшує роботу над проєктами, особливо у великих командах.
- Більш безпечний рефакторинг. TypeScript полегшує процес рефакторингу коду, що допомагає уникнути помилок, які можуть 
виникнути під час зміни типів або структур даних.
*/
/**
  |============================
  | Встановлення та налаштування середовища розробки
  |============================
*/
/* 
Для ефективної роботи з TypeScript нам потрібно зробити кілька кроків для встановлення та налаштування середовища розробки. 
У цьому випадку ми будемо використовувати Node.js і Visual Studio Code (VS Code).

Спочатку потрібно встановити Node.js, якщо у вас його немає. Ви можете завантажити його з офіційного сайту за адресою 
https://nodejs.org/en/. Рекомендується вибрати версію LTS (Long Term Support), оскільки вона є найстабільнішою.

Наступним кроком буде встановлення TypeScript. Це можна зробити за допомогою Node Package Manager (npm), який автоматично 
встановлюється з Node.js. 

Відкрийте термінал і виконайте наступну команду:
npm install -g typescript

Ця команда встановлює TypeScript глобально на ваш комп'ютер, що дозволяє використовувати його в будь-якому проєкті.

Visual Studio Code (VS Code) — чудовий вибір для роботи з TypeScript. Якщо ви ще не встановили VS Code, ви можете завантажити 
його з офіційного сайту: https://code.visualstudio.com/.

Після встановлення VS Code рекомендується встановити наступні розширення, які спростять розробку:

ESLint
Prettier - Code formatter
Path Intellisense

Тепер у вас є все необхідне для початку роботи з TypeScript! Ви можете створити новий файл TypeScript з розширенням .ts 
і почати писати код.
*/
